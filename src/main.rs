mod handler;
mod model;
mod response;
mod server;
mod verification;
mod zkbob_generator;

use std::fs;

#[tokio::main]
async fn main() -> std::io::Result<()> {
    env_logger::init_from_env(env_logger::Env::new().default_filter_or("info"));
    let mut handles = vec![];

    let port: u16 = 3030;
    let port_clone = port.clone().to_string();
    let enclave_key = hex::encode(fs::read("/app/secp.sec").unwrap());
    println!("enclave key: {}", enclave_key);

    let enclave_key_clone = enclave_key.clone();
    let handle_1 = tokio::spawn(async {
        let listener =
            kalypso_listener::job_creator::JobCreator::simple_listener_for_confidential_prover(
                "0x6A527B949Fb76672FBf45F881eE2A4281E401d06".into(),
                enclave_key_clone,
                "7".into(),
                "https://arb-sepolia.g.alchemy.com/v2/cFwacd_RbVpNrezyxZEvO6AnnCuO-kxt".into(),
                "c53dd8e14d0a4f8fa7b87c66adfc0d6197159732fd29517ea6783741423b9f54".into(),
                "0x0b6340a893B944BDc3B4F012e934b724c83abF97".into(),
                "0x5ce3e1010028C4F5687356D721e3e2B6DcEA7C25".into(),
                82100000,
                421614,
                port_clone,
                false,
                10,
            );

        listener.run().await
    });
    handles.push(handle_1);

    let handle_2 = tokio::spawn(server::ProvingServer::new(enclave_key, port).start_server());
    handles.push(handle_2);

    for handle in handles {
        let _ = handle.await;
    }

    println!("All tasks completed or shutdown.");

    Ok(())
}

#[cfg(test)]
mod tests {
    use crate::handler;
    use actix_web::web::Data;
    use actix_web::{test, App};
    use kalypso_ivs_models::models::EncryptedInputPayload;
    use log::warn;
    use serde::{Deserialize, Serialize};
    use serde_json::{json, Value};
    use std::sync::{Arc, Mutex};
    use tokio::fs;

    #[actix_rt::test]
    async fn test_server() {
        let app = test::init_service(App::new().service(handler::test)).await;
        let req = test::TestRequest::get().uri("/test").to_request();
        let resp = test::call_service(&app, req).await;

        assert!(resp.status().is_success());

        let result = test::read_body(resp).await;
        let result_json: Value = serde_json::from_slice(&result).unwrap();
        let expected_json = json!({
            "message": "The zkbob generator is running!!",
            "data": "Zkbob Prover is running!"
        });

        assert_eq!(result_json, expected_json);
    }

    #[actix_rt::test]
    async fn test_benchmark() {
        let app = test::init_service(App::new().service(handler::benchmark)).await;
        let req = test::TestRequest::get().uri("/benchmark").to_request();
        let resp = test::call_service(&app, req).await;

        assert!(resp.status().is_success());

        let result = test::read_body(resp).await;
        let result_json: Value = serde_json::from_slice(&result).unwrap();
        let expected_message = "Success";

        assert_eq!(result_json["data"], expected_message);
    }

    #[actix_rt::test]
    async fn test_generate_proof() {
        let enclave_key = fs::read("./app/secp.sec").await.unwrap();
        let enclave_key = Arc::new(Mutex::new(enclave_key));

        let app = test::init_service(
            App::new()
                .service(handler::generate_proof)
                .app_data(Data::new(enclave_key)),
        )
        .await;
        let private_input = fs::read("./app/secret.json").await.unwrap();

        let payload = kalypso_generator_models::models::InputPayload::from_plain_secrets(
            [
                0, 149, 221, 100, 181, 187, 205, 218, 150, 243, 174, 150, 1, 108, 103, 27, 41, 133,
                46, 218, 100, 234, 137, 14, 162, 155, 188, 35, 85, 34, 44, 207, 35, 244, 57, 42,
                217, 183, 245, 231, 78, 211, 88, 15, 19, 65, 228, 15, 192, 160, 60, 228, 196, 202,
                155, 206, 98, 138, 206, 118, 159, 69, 119, 59, 46, 63, 29, 216, 163, 249, 221, 229,
                154, 211, 90, 167, 5, 53, 100, 221, 99, 221, 10, 121, 23, 85, 42, 101, 184, 34, 64,
                134, 37, 123, 113, 202, 0, 0, 0, 0, 0, 0, 0, 0, 7, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 170, 17, 1, 23, 1, 29, 109, 250, 163, 73,
                169, 2, 65, 141, 14, 248, 141, 70, 150, 93, 176, 39, 115, 131, 81, 155, 181, 186,
                135, 68, 212,
            ]
            .into(),
            private_input,
        );

        fs::write(
            "generate_proof_payload.json",
            serde_json::to_string(&payload).unwrap(),
        )
        .await
        .unwrap();

        let req = test::TestRequest::post()
            .uri("/generateProof")
            .set_json(&payload)
            .to_request();

        let resp = test::call_service(&app, req).await;

        assert!(resp.status().is_success());
    }

    #[actix_rt::test]
    async fn test_check_input() {
        let app = test::init_service(App::new().service(handler::check_input_handler)).await;

        let secrets = fs::read("./app/secret.json").await.unwrap();
        let payload = kalypso_generator_models::models::InputPayload::from_plain_secrets(
            [
                0, 149, 221, 100, 181, 187, 205, 218, 150, 243, 174, 150, 1, 108, 103, 27, 41, 133,
                46, 218, 100, 234, 137, 14, 162, 155, 188, 35, 85, 34, 44, 207, 35, 244, 57, 42,
                217, 183, 245, 231, 78, 211, 88, 15, 19, 65, 228, 15, 192, 160, 60, 228, 196, 202,
                155, 206, 98, 138, 206, 118, 159, 69, 119, 59, 46, 63, 29, 216, 163, 249, 221, 229,
                154, 211, 90, 167, 5, 53, 100, 221, 99, 221, 10, 121, 23, 85, 42, 101, 184, 34, 64,
                134, 37, 123, 113, 202, 0, 0, 0, 0, 0, 0, 0, 0, 7, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 170, 17, 1, 23, 1, 29, 109, 250, 163, 73,
                169, 2, 65, 141, 14, 248, 141, 70, 150, 93, 176, 39, 115, 131, 81, 155, 181, 186,
                135, 68, 212,
            ]
            .into(),
            secrets,
        );
        fs::write(
            "1_check_valid_input_payload.json",
            serde_json::to_string(&payload).unwrap(),
        )
        .await
        .unwrap();

        let req = test::TestRequest::post()
            .uri("/checkInput")
            .set_json(&payload)
            .to_request();

        let resp = test::call_service(&app, req).await;

        assert!(resp.status().is_success());

        let result = test::read_body(resp).await;
        let result_json: serde_json::Value = serde_json::from_slice(&result).unwrap();
        let expected_json = json!({
            "valid": true
        });

        assert_eq!(result_json, expected_json);
    }

    #[actix_rt::test]
    async fn test_check_invalid_input() {
        let app = test::init_service(App::new().service(handler::check_input_handler)).await;

        let secrets = "this is an invalid input".into();
        let payload = kalypso_generator_models::models::InputPayload::from_plain_secrets(
            [
                0, 149, 221, 100, 181, 187, 205, 218, 150, 243, 174, 150, 1, 108, 103, 27, 41, 133,
                46, 218, 100, 234, 137, 14, 162, 155, 188, 35, 85, 34, 44, 207, 35, 244, 57, 42,
                217, 183, 245, 231, 78, 211, 88, 15, 19, 65, 228, 15, 192, 160, 60, 228, 196, 202,
                155, 206, 98, 138, 206, 118, 159, 69, 119, 59, 46, 63, 29, 216, 163, 249, 221, 229,
                154, 211, 90, 167, 5, 53, 100, 221, 99, 221, 10, 121, 23, 85, 42, 101, 184, 34, 64,
                134, 37, 123, 113, 202, 0, 0, 0, 0, 0, 0, 0, 0, 7, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 170, 17, 1, 23, 1, 29, 109, 250, 163, 73,
                169, 2, 65, 141, 14, 248, 141, 70, 150, 93, 176, 39, 115, 131, 81, 155, 181, 186,
                135, 68, 212,
            ]
            .into(),
            secrets,
        );

        fs::write(
            "2_check_invalid_input_payload.json",
            serde_json::to_string(&payload).unwrap(),
        )
        .await
        .unwrap();

        let req = test::TestRequest::post()
            .uri("/checkInput")
            .set_json(&payload)
            .to_request();

        let resp = test::call_service(&app, req).await;

        assert!(resp.status().is_success());

        let result = test::read_body(resp).await;
        let result_json: serde_json::Value = serde_json::from_slice(&result).unwrap();
        let expected_json = json!({
            "valid": false
        });

        assert_eq!(result_json, expected_json);
    }

    #[actix_rt::test]
    async fn test_check_valid_input_with_signature() {
        let enclave_key = fs::read("./app/secp.sec").await.unwrap();
        let enclave_key = Arc::new(Mutex::new(enclave_key));
        let app = test::init_service(
            App::new()
                .service(handler::get_attestation_for_invalid_inputs)
                .app_data(Data::new(enclave_key)),
        )
        .await;
        let secret_data = fs::read("./app/secret.json").await.unwrap();

        let ask_payload = kalypso_ivs_models::models::InvalidInputPayload::from_plain_secrets(
            1.into(),
            [
                0, 149, 221, 100, 181, 187, 205, 218, 150, 243, 174, 150, 1, 108, 103, 27, 41, 133,
                46, 218, 100, 234, 137, 14, 162, 155, 188, 35, 85, 34, 44, 207, 35, 244, 57, 42,
                217, 183, 245, 231, 78, 211, 88, 15, 19, 65, 228, 15, 192, 160, 60, 228, 196, 202,
                155, 206, 98, 138, 206, 118, 159, 69, 119, 59, 46, 63, 29, 216, 163, 249, 221, 229,
                154, 211, 90, 167, 5, 53, 100, 221, 99, 221, 10, 121, 23, 85, 42, 101, 184, 34, 64,
                134, 37, 123, 113, 202, 0, 0, 0, 0, 0, 0, 0, 0, 7, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 170, 17, 1, 23, 1, 29, 109, 250, 163, 73,
                169, 2, 65, 141, 14, 248, 141, 70, 150, 93, 176, 39, 115, 131, 81, 155, 181, 186,
                135, 68, 212,
            ]
            .into(),
            secret_data,
        );

        fs::write(
            "3_get_attestation_for_valid_input.json",
            serde_json::to_string(&ask_payload).unwrap(),
        )
        .await
        .unwrap();

        let req = test::TestRequest::post()
            .uri("/getAttestationForInvalidInputs")
            .set_json(&ask_payload)
            .to_request();

        let resp = test::call_service(&app, req).await;
        assert!(resp.status().is_success());

        let result = test::read_body(resp).await;
        let result_json: serde_json::Value = serde_json::from_slice(&result).unwrap();
        // when payload is valid, signature is not required to be sent
        let expected_json = json!({
            "valid": true
        });
        assert_eq!(result_json, expected_json);
    }

    #[actix_rt::test]
    async fn test_check_invalid_input_with_signature() {
        let enclave_key = fs::read("./app/secp.sec").await.unwrap();
        let enclave_key = Arc::new(Mutex::new(enclave_key));
        let app = test::init_service(
            App::new()
                .service(handler::get_attestation_for_invalid_inputs)
                .app_data(Data::new(enclave_key)),
        )
        .await;
        let secret_data = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5]; // these are invalid inputs

        let ask_payload = kalypso_ivs_models::models::InvalidInputPayload::from_plain_secrets(
            1.into(),
            [
                0, 149, 221, 100, 181, 187, 205, 218, 150, 243, 174, 150, 1, 108, 103, 27, 41, 133,
                46, 218, 100, 234, 137, 14, 162, 155, 188, 35, 85, 34, 44, 207, 35, 244, 57, 42,
                217, 183, 245, 231, 78, 211, 88, 15, 19, 65, 228, 15, 192, 160, 60, 228, 196, 202,
                155, 206, 98, 138, 206, 118, 159, 69, 119, 59, 46, 63, 29, 216, 163, 249, 221, 229,
                154, 211, 90, 167, 5, 53, 100, 221, 99, 221, 10, 121, 23, 85, 42, 101, 184, 34, 64,
                134, 37, 123, 113, 202, 0, 0, 0, 0, 0, 0, 0, 0, 7, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 170, 17, 1, 23, 1, 29, 109, 250, 163, 73,
                169, 2, 65, 141, 14, 248, 141, 70, 150, 93, 176, 39, 115, 131, 81, 155, 181, 186,
                135, 68, 212,
            ]
            .into(),
            secret_data,
        );

        fs::write(
            "4_get_attestation_for_invalid_inputs_payload.json",
            serde_json::to_string(&ask_payload).unwrap(),
        )
        .await
        .unwrap();

        let req = test::TestRequest::post()
            .uri("/getAttestationForInvalidInputs")
            .set_json(&ask_payload)
            .to_request();

        let resp = test::call_service(&app, req).await;
        assert!(resp.status().is_success());

        let result = test::read_body(resp).await;
        let result_json: serde_json::Value = serde_json::from_slice(&result).unwrap();

        // when payload is valid, signature is not required to be sent
        // below info is computed for above ask
        let expected_json = json!({
            "proof": hex::decode("920a38998dc51cab3e55c3f5902b2eb317026d16098dd0b64d1be5a729245bae425ebad87ef530b62f9686721ba87072a8059e4cf0f870aeeadd602f85d097d31b").unwrap()
        });
        assert_eq!(result_json, expected_json);
    }

    #[actix_rt::test]
    async fn test_check_encrypted_input() {
        //tough one.
        let enclave_key = fs::read("./app/secp.sec").await.unwrap();
        let enclave_key = Arc::new(Mutex::new(enclave_key));

        let app = test::init_service(
            App::new()
                .service(handler::check_encrypted_input)
                .app_data(Data::new(enclave_key)),
        )
        .await;
        let data_to_encrypt = fs::read("./app/secret.json").await.unwrap();

        let matching_engine_pubkey =
            hex::decode(fetch_me_pub_key().await.expect("Failed fetching me pubkey"))
                .expect("is valid ecies pubkey");
        let encrypted_data =
            kalypso_helper::secret_inputs_helpers::encrypt_data_with_ecies_and_aes(
                &matching_engine_pubkey,
                &data_to_encrypt,
            )
            .expect("Unable to encrypt the data");

        let public_input = vec![
            0, 149, 221, 100, 181, 187, 205, 218, 150, 243, 174, 150, 1, 108, 103, 27, 41, 133, 46,
            218, 100, 234, 137, 14, 162, 155, 188, 35, 85, 34, 44, 207, 35, 244, 57, 42, 217, 183,
            245, 231, 78, 211, 88, 15, 19, 65, 228, 15, 192, 160, 60, 228, 196, 202, 155, 206, 98,
            138, 206, 118, 159, 69, 119, 59, 46, 63, 29, 216, 163, 249, 221, 229, 154, 211, 90,
            167, 5, 53, 100, 221, 99, 221, 10, 121, 23, 85, 42, 101, 184, 34, 64, 134, 37, 123,
            113, 202, 0, 0, 0, 0, 0, 0, 0, 0, 7, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 4, 170, 17, 1, 23, 1, 29, 109, 250, 163, 73, 169, 2, 65, 141, 14,
            248, 141, 70, 150, 93, 176, 39, 115, 131, 81, 155, 181, 186, 135, 68, 212,
        ];

        let payload: EncryptedInputPayload = EncryptedInputPayload {
            acl: encrypted_data.acl_data,
            encrypted_secrets: encrypted_data.encrypted_data,
            me_decryption_url: "http://13.201.131.193:3000/decryptRequest".into(),
            market_id: "7".into(),
            public_inputs: Some(public_input),
        };

        fs::write(
            "5_check_encrypted_input_payload.json",
            serde_json::to_string(&payload).unwrap(),
        )
        .await
        .unwrap();

        let req = test::TestRequest::post()
            .uri("/checkEncryptedInputs")
            .set_json(&payload)
            .to_request();

        let resp = test::call_service(&app, req).await;
        assert!(resp.status().is_success());

        let result = test::read_body(resp).await;
        let result_json: serde_json::Value = serde_json::from_slice(&result).unwrap();
        // when payload is valid, signature is not required to be sent
        let expected_json = json!({
            "valid": true
        });
        assert_eq!(result_json, expected_json);
    }

    #[actix_rt::test]
    async fn test_check_encrypted_input_compressed() {
        //tough one.
        let enclave_key = fs::read("./app/secp.sec").await.unwrap();
        let enclave_key = Arc::new(Mutex::new(enclave_key));

        let app = test::init_service(
            App::new()
                .service(handler::check_encrypted_input)
                .app_data(Data::new(enclave_key)),
        )
        .await;

        let acl_data = vec![
            4, 54, 1, 255, 23, 188, 42, 55, 214, 16, 203, 187, 131, 188, 119, 106, 75, 200, 70, 14,
            59, 159, 249, 234, 235, 104, 114, 194, 21, 238, 184, 219, 190, 211, 204, 7, 180, 245,
            61, 99, 117, 164, 66, 247, 64, 71, 89, 89, 84, 77, 226, 236, 119, 160, 250, 109, 60,
            60, 24, 159, 161, 20, 185, 130, 199, 246, 251, 79, 41, 120, 59, 251, 16, 231, 249, 9,
            109, 55, 91, 217, 190, 53, 138, 177, 49, 79, 253, 12, 225, 254, 54, 31, 252, 81, 55,
            141, 140, 207, 249, 140, 18, 251, 172, 124, 163, 113, 30, 230, 226, 153, 31, 216, 94,
            33, 244, 78, 130, 12, 208, 110, 235, 208, 251, 115, 96, 194, 129, 249, 19,
        ];

        let encrypted_data = vec![
            45, 94, 99, 112, 176, 207, 23, 232, 67, 133, 16, 86, 106, 192, 3, 71, 188, 202, 3, 89,
            46, 244, 188, 91, 45, 249, 148, 1, 10, 64, 69, 121, 153, 255, 129, 230, 22, 30, 115,
            114, 155, 215, 149, 95, 18, 128, 168, 250, 119, 212, 121, 69, 15, 112, 19, 13, 74, 84,
            148, 150, 146, 126, 191, 144, 73, 181, 167, 158, 41, 192, 68, 161, 103, 155, 32, 241,
            114, 153, 216, 254, 144, 35, 103, 33, 92, 149, 18, 217, 47, 74, 126, 110, 2, 203, 25,
            153, 226, 253, 23, 54, 24, 183, 64, 22, 156, 105, 161, 115, 173, 156, 228, 188, 69,
            101, 153, 246, 101, 135, 18, 45, 135, 24, 252, 246, 208, 254, 51, 248, 75, 226, 37, 41,
            101, 63, 41, 168, 228, 199, 67, 164, 185, 247, 194, 192, 229, 195, 92, 12, 227, 241,
            98, 103, 200, 23, 177, 82, 174, 175, 34, 21, 4, 30, 149, 43, 170, 137, 5, 98, 250, 82,
            226, 119, 151, 1, 133, 241, 129, 165, 157, 139, 253, 202, 119, 97, 64, 202, 18, 190,
            98, 237, 247, 8, 211, 142, 11, 3, 183, 69, 7, 26, 242, 45, 188, 90, 202, 47, 5, 94,
            143, 102, 209, 33, 248, 205, 2, 184, 235, 84, 159, 101, 234, 224, 242, 199, 142, 32,
            40, 49, 62, 225, 198, 17, 173, 161, 96, 140, 23, 135, 190, 125, 42, 186, 110, 249, 80,
            68, 48, 68, 99, 135, 216, 100, 177, 31, 86, 91, 230, 192, 248, 68, 235, 189, 3, 248,
            235, 69, 227, 113, 174, 9, 137, 7, 226, 250, 23, 110, 157, 146, 66, 149, 96, 110, 156,
            211, 210, 93, 60, 49, 84, 34, 150, 105, 253, 58, 184, 175, 95, 109, 221, 24, 241, 182,
            56, 216, 251, 171, 44, 27, 141, 134, 152, 252, 67, 103, 158, 214, 203, 59, 98, 95, 191,
            33, 205, 52, 243, 171, 91, 146, 92, 19, 49, 114, 160, 54, 115, 239, 117, 139, 192, 57,
            151, 124, 210, 82, 14, 143, 253, 194, 57, 175, 109, 65, 74, 9, 115, 134, 123, 166, 149,
            91, 242, 75, 46, 88, 32, 133, 172, 102, 214, 71, 190, 167, 59, 120, 75, 209, 64, 144,
            43, 20, 41, 124, 142, 101, 75, 76, 64, 56, 179, 164, 240, 205, 40, 194, 19, 12, 91,
            171, 166, 8, 37, 247, 56, 207, 180, 95, 218, 237, 87, 127, 89, 142, 111, 53, 21, 246,
            180, 155, 250, 117, 94, 67, 176, 232, 111, 53, 51, 222, 141, 170, 233, 20, 60, 177,
            126, 23, 40, 55, 62, 21, 96, 71, 190, 236, 198, 201, 165, 140, 172, 217, 45, 29, 123,
            133, 201, 45, 176, 138, 52, 42, 200, 252, 201, 235, 243, 192, 10, 87, 181, 9, 72, 33,
            110, 220, 231, 86, 116, 155, 172, 236, 83, 255, 208, 48, 252, 175, 59, 93, 172, 150,
            233, 148, 45, 64, 137, 51, 162, 71, 167, 238, 191, 62, 160, 26, 88, 243, 81, 87, 49,
            193, 73, 138, 207, 129, 1, 4, 204, 71, 153, 130, 9, 70, 52, 77, 54, 136, 37, 203, 41,
            149, 214, 199, 150, 11, 213, 110, 138, 37, 198, 48, 104, 95, 104, 71, 247, 197, 154, 5,
            31, 209, 199, 140, 254, 143, 31, 2, 62, 175, 246, 157, 16, 131, 3, 233, 47, 37, 102,
            99, 213, 98, 189, 204, 75, 213, 173, 215, 199, 200, 107, 134, 60, 84, 230, 4, 65, 100,
            190, 214, 193, 103, 70, 149, 3, 74, 38, 128, 37, 166, 240, 19, 59, 8, 24, 221, 155,
            120, 67, 175, 95, 42, 226, 94, 243, 205, 243, 255, 214, 3, 151, 63, 119, 20, 99, 102,
            75, 254, 68, 164, 101, 134, 221, 114, 32, 61, 31, 105, 207, 131, 44, 251, 89, 52, 165,
            89, 46, 157, 174, 34, 212, 122, 114, 17, 182, 207, 50, 91, 152, 183, 68, 209, 8, 147,
            145, 184, 103, 88, 226, 127, 64, 159, 103, 189, 59, 54, 126, 10, 92, 231, 229, 112, 1,
            23, 251, 20, 244, 81, 87, 38, 63, 67, 55, 58, 127, 123, 42, 74, 89, 249, 178, 50, 146,
            112, 205, 207, 239, 96, 92, 60, 112, 127, 136, 128, 106, 41, 2, 237, 56, 213, 84, 145,
            112, 183, 203, 168, 125, 139, 88, 2, 158, 189, 92, 22, 113, 254, 141, 191, 162, 96, 28,
            186, 139, 18, 252, 192, 167, 197, 166, 93, 10, 140, 77, 76, 145, 218, 154, 126, 14, 55,
            169, 181, 188, 32, 39, 98, 184, 200, 178, 20, 89, 169, 23, 75, 184, 184, 191, 206, 235,
            5, 237, 58, 252, 89, 124, 10, 4, 14, 63, 176, 168, 230, 114, 169, 228, 74, 137, 133,
            183, 138, 179, 51, 162, 0, 116, 229, 182, 124, 78, 231, 255, 182, 151, 170, 49, 227,
            24, 57, 76, 128, 67, 251, 127, 141, 165, 172, 68, 6, 215, 221, 188, 62, 186, 130, 113,
            44, 9, 121, 90, 148, 94, 83, 146, 136, 151, 148, 78, 97, 242, 46, 54, 50, 10, 159, 83,
            10, 6, 157, 231, 146, 96, 86, 74, 86, 146, 182, 218, 33, 109, 222, 28, 203, 39, 6, 207,
            109, 30, 197, 242, 164, 200, 181, 230, 109, 212, 25, 154, 245, 37, 12, 142, 168, 160,
            33, 160, 24, 119, 107, 238, 53, 175, 236, 135, 97, 45, 190, 113, 163, 87, 235, 217,
            192, 242, 225, 200, 228, 101, 18, 69, 62, 55, 142, 51, 196, 151, 25, 182, 165, 46, 31,
            21, 143, 9, 86, 199, 106, 18, 234, 231, 114, 66, 185, 113, 255, 27, 82, 20, 127, 45,
            112, 64, 251, 8, 199, 192, 142, 84, 99, 161, 89, 225, 110, 15, 154, 9, 185, 229, 216,
            209, 22, 251, 143, 149, 207, 64, 47, 40, 104, 208, 244, 163, 237, 141, 4, 234, 38, 248,
            63, 206, 241, 94, 171, 41, 3, 6, 211, 140, 174, 182, 161, 88, 239, 53, 138, 45, 177,
            139, 255, 197, 115, 81, 141, 21, 145, 94, 233, 19, 211, 184, 125, 69, 85, 234, 46, 88,
            198, 33, 240, 46, 94, 210, 73, 43, 146, 214, 221, 216, 152, 236, 54, 122, 203, 120,
            247, 23, 37, 223, 2, 138, 189, 245, 130, 210, 4, 78, 27, 35, 179, 142, 208, 127, 156,
            157, 77, 180, 156, 134, 179, 248, 252, 11, 107, 134, 238, 110, 34, 22, 175, 142, 228,
            191, 180, 4, 109, 55, 98, 29, 228, 82, 107, 242, 161, 41, 210, 135, 141, 130, 155, 57,
            105, 165, 75, 254, 82, 43, 137, 46, 130, 53, 8, 105, 68, 56, 252, 219, 51, 45, 47, 40,
            39, 23, 215, 12, 224, 157, 95, 37, 225, 175, 88, 112, 15, 243, 113, 210, 99, 183, 120,
            91, 170, 8, 124, 200, 19, 87, 76, 24, 21, 136, 89, 23, 94, 253, 79, 85, 119, 196, 190,
            59, 64, 244, 106, 72, 241, 59, 111, 122, 185, 105, 35, 56, 70, 15, 249, 181, 0, 87,
            102, 35, 23, 43, 248, 238, 110, 146, 163, 224, 71, 17, 192, 60, 7, 172, 130, 167, 160,
            189, 193, 233, 100, 181, 130, 5, 116, 153, 176, 17, 1, 63, 209, 178, 242, 185, 47, 102,
            222, 197, 116, 197, 145, 65, 202, 89, 236, 111, 161, 144, 115, 235, 179, 74, 84, 145,
            145, 160, 136, 33, 25, 36, 197, 164, 39, 180, 193, 177, 114, 72, 230, 65, 193, 128,
            131, 245, 162, 234, 10, 6, 173, 148, 253, 252, 123, 31, 183, 67, 246, 6, 240, 135, 89,
            114, 128, 173, 86, 113, 168, 92, 74, 234, 48, 17, 106, 222, 100, 109, 157, 187, 4, 33,
            113, 209, 14, 10, 17, 248, 59, 185, 162, 145, 216, 204, 161, 15, 126, 165, 28, 21, 50,
            140, 65, 184, 118, 180, 47, 181, 96, 38, 187, 63, 67, 146, 144, 63, 185, 101, 69, 0,
            80, 102, 34, 184, 68, 137, 4, 108, 34, 139, 247, 145, 180, 24, 138, 93, 125, 140, 4,
            93, 60, 196, 215, 18, 32, 187, 181, 48, 50, 196, 221, 90, 126, 152, 15, 72, 26, 253,
            138, 185, 57, 247, 183, 63, 207, 40, 66, 255, 245, 143, 63, 90, 51, 5, 176, 52, 37,
            197, 132, 180, 110, 16, 231, 58, 78, 243, 59, 122, 18, 81, 119, 1, 51, 143, 101, 67,
            11, 143, 159, 45, 79, 96, 224, 86, 42, 47, 156, 253, 186, 73, 209, 36, 25, 193, 133,
            169, 104, 190, 65, 171, 177, 61, 14, 96, 161, 67, 218, 127, 69, 90, 5, 57, 85, 78, 134,
            254, 154, 110, 174, 136, 244, 143, 205, 208, 41, 104, 55, 185, 24, 12, 148, 145, 235,
            178, 87, 98, 219, 117, 206, 235, 88, 81, 55, 47, 76, 109, 248, 177, 210, 246, 150, 205,
            126, 12, 47, 247, 246, 236, 238, 11, 11, 78, 189, 18, 2, 110, 214, 165, 183, 10, 227,
            217, 164, 241, 50, 255, 137, 164, 199, 236, 215, 10, 253, 226, 93, 50, 54, 206, 120,
            176, 95, 129, 243, 252, 32, 11, 79, 222, 30, 225, 23, 228, 5, 169, 194, 213, 201, 20,
            134, 30, 116, 3, 5, 227, 27, 84, 105, 183, 149, 107, 191, 9, 41, 52, 14, 74, 130, 127,
            138, 230, 15, 206, 234, 128, 168, 22, 50, 202, 253, 104, 225, 222, 202, 128, 93, 99,
            69, 222, 227, 145, 117, 228, 120, 190, 75, 137, 159, 80, 162, 154, 159, 213, 252, 194,
            194, 176, 19, 242, 121, 27, 3, 73, 133, 188, 31, 237, 135, 106, 170, 47, 38, 176, 76,
            117, 88, 17, 137, 134, 103, 173, 69, 143, 252, 172, 57, 168, 103, 158, 8, 29, 57, 218,
            65, 97, 214, 47, 135, 29, 43, 72, 48, 177, 136, 83, 71, 215, 2, 135, 92, 152, 112, 237,
            26, 78, 140, 141, 210, 247, 225, 228, 217, 209, 137, 207, 66, 88, 182, 120, 253, 247,
            254, 114, 64, 251, 175, 123, 227, 212, 76, 165, 68, 51, 163, 95, 216, 132, 246, 218,
            79, 195, 200, 114, 90, 223, 84, 196, 148, 83, 190, 203, 174, 100, 223, 121, 15, 215,
            13, 7, 175, 114, 69, 89, 155, 130, 252, 19, 177, 247, 171, 138, 32, 127, 98, 225, 21,
            81, 27, 95, 158, 195, 61, 204, 147, 119, 126, 216, 30, 27, 159, 118, 212, 127, 63, 252,
            193, 44, 89, 84, 36, 147, 89, 42, 70, 51, 249, 181, 169, 136, 246, 8, 222, 91, 155,
            133, 181, 160, 155, 237, 34, 195, 23, 7, 249, 226, 195, 102, 8, 113, 159, 254, 231,
            144, 198, 96, 212, 97, 45, 208, 79, 233, 37, 197, 98, 76, 154, 100, 20, 74, 236, 25,
            144, 251, 63, 121, 62, 153, 21, 208, 65, 3, 239, 89, 233, 208, 159, 37, 59, 100, 3,
            215, 2, 205, 155, 114, 19, 25, 107, 48, 152, 31, 219, 58, 8, 10, 146, 46, 73, 118, 31,
            32, 37, 204, 168, 28, 240, 210, 55, 172, 237, 51, 228, 39, 53, 185, 102, 157, 8, 191,
            241, 192, 241, 213, 63, 111, 49, 102, 205, 194, 229, 250, 110, 118, 40, 180, 219, 243,
            252, 113, 185, 127, 120, 188, 205, 84, 221, 195, 247, 242, 87, 69, 10, 40, 127, 31,
            211, 198, 83, 133, 119, 133, 124, 0, 64, 244, 222, 240, 212, 11, 241, 93, 48, 12, 143,
            75, 143, 20, 155, 102, 9, 114, 234, 27, 137, 222, 252, 209, 234, 190, 124, 246, 26,
            157, 128, 129, 57, 136, 86, 151, 50, 191, 243, 174, 130, 134, 86, 183, 192, 212, 174,
            183, 9, 180, 21, 206, 22, 7, 80, 254, 201, 127, 219, 241, 113, 192, 73, 179, 7, 88,
            238, 234, 199, 143, 255, 121, 61, 238, 172, 189, 73, 67, 239, 116, 40, 19, 198, 68, 39,
            112, 53, 168, 8, 213, 242, 220, 66, 246, 31, 158, 104, 110, 21, 235, 44, 184, 86, 188,
            189, 140, 15, 201, 111, 152, 255, 46, 45, 112, 200, 240, 215, 116, 9, 50, 177, 59, 111,
            113, 183, 253, 45, 32, 119, 10, 162, 103, 160, 63, 180, 250, 148, 170, 205, 85, 118,
            165, 73, 10, 195, 241, 27, 140, 243, 193, 123, 161, 196, 161, 236, 82, 53, 117, 114,
            139, 131, 84, 65, 7, 46, 124, 148, 201, 87, 8, 164, 149, 203, 218, 57, 50, 7, 111, 186,
            81, 134, 123, 41, 85, 71, 163, 47, 86, 21, 70, 198, 108, 42, 180, 94, 155, 240, 140,
            197, 164, 216, 92, 229, 185, 4, 139, 100, 251, 3, 49, 15, 90, 46, 205, 113, 194, 105,
            69, 82, 166, 11, 12, 111, 70, 190, 212, 34, 90, 189, 11, 147, 89, 2, 247, 96, 138, 47,
            2, 176, 53, 227, 122, 75, 45, 27, 50, 170, 217, 63, 146, 30, 114, 124, 166, 228, 87,
            28, 19, 159, 26, 120, 199, 159, 172, 69, 252, 188, 17, 55, 96, 88, 188, 145, 230, 21,
            37, 94, 171, 58, 164, 113, 167, 68, 63, 43, 227, 45, 29, 80, 208, 136, 110, 71, 29, 14,
            34, 129, 129, 201, 95, 1, 44, 219, 172, 19, 72, 175, 22, 144, 238, 7, 200, 193, 62, 96,
            1, 227, 58, 253, 39, 217, 73, 125, 52, 226, 72, 226, 144, 216, 43, 238, 170, 150, 36,
            18, 248, 94, 98, 15, 88, 206, 212, 208, 26, 65, 223, 103, 219, 138, 90, 185, 19, 195,
            138, 0, 201, 188, 238, 250, 156, 103, 137, 48, 199, 108, 245, 154, 126, 93, 41, 224,
            171, 105, 29, 182, 228, 175, 25, 89, 46, 224, 42, 43, 99, 50, 218, 142, 147, 10, 160,
            64, 175, 74, 185, 49, 238, 36, 28, 18, 161, 98, 204, 68, 210, 195, 68, 24, 33, 210,
            107, 62, 66, 196, 113, 25, 22, 84, 25, 93, 31, 202, 217, 50, 77, 77, 145, 7, 244, 49,
            151, 78, 220, 238, 178, 253, 27, 91, 123, 135, 244, 144, 94, 178, 230, 71, 72, 136, 7,
            35, 33, 192, 34, 100, 222, 218, 55, 68, 135, 43, 173, 111, 106, 161, 73, 32, 228, 35,
            231, 98, 154, 86, 82, 47, 116, 15, 109, 12, 206, 210, 33, 29, 122, 44, 86, 147, 5, 215,
            151, 165, 88, 155, 84, 209, 196, 169, 166, 246, 221, 119, 75, 40, 203, 63, 234, 143,
            176, 202, 128, 149, 186, 236, 243, 122, 71, 128, 149, 59, 72, 250, 73, 34, 178, 129,
            61, 178, 76, 108, 223, 5, 58, 224, 246, 93, 63, 152, 178, 163, 121, 174, 121, 18, 83,
            9, 61, 193, 20, 222, 115, 232, 192, 227, 209, 90, 71, 108, 191, 199, 15, 248, 242, 139,
            245, 227, 254, 208, 24, 28, 233, 238, 100, 214, 200, 148, 226, 196, 150, 59, 41, 191,
            43, 29, 134, 185, 227, 168, 81, 86, 121, 89, 71, 50, 154, 123, 161, 9, 247, 22, 110,
            118, 226, 223, 136, 39, 114, 184, 195, 218, 111, 203, 162, 50, 57, 56, 48, 11, 146,
            189, 116, 157, 66, 86, 127, 253, 53, 14, 88, 173, 252, 255, 114, 203, 171, 123, 60, 23,
            173, 133, 121, 158, 117, 53, 170, 130, 158, 138, 247, 29, 3, 19, 116, 107, 5, 6, 26,
            218, 129, 205, 42, 131, 74, 248, 80, 160, 196, 254, 217, 164, 213, 0, 166, 229, 224,
            88, 247, 154, 154, 240, 245, 129, 166, 146, 170, 37, 194, 155, 31, 248, 21, 25, 80,
            140, 231, 186, 191, 160, 44, 36, 250, 42, 172, 218, 150, 186, 140, 186, 22, 56, 67, 44,
            43, 163, 184, 87, 169, 151, 132, 175, 61, 104, 16, 133, 168, 10, 66, 254, 25, 74, 213,
            101, 18, 19, 241, 43, 34, 134, 17, 43, 204, 202, 207, 164, 210, 108, 253, 79, 223, 64,
            23, 202, 97, 80, 107, 238, 153, 72, 255, 94, 113, 212, 98, 144, 255, 228, 247, 123, 94,
            184, 217, 217, 206, 122, 122, 98, 182, 67, 62, 186, 174, 249, 72, 240, 22, 245, 230,
            215, 229, 166, 215, 21, 245, 112, 19, 232, 159, 197, 93, 23, 208, 150, 252, 16, 172,
            90, 246, 113, 184, 169, 197, 185, 229, 13, 142, 52, 185, 210, 253, 89, 95, 22, 147,
            140, 22, 76, 74, 224, 208, 187, 238, 218, 102, 253, 75, 198, 144, 212, 144, 234, 133,
            217, 215, 161, 7, 114, 160, 69, 110, 80, 69, 26, 156, 227, 181, 113, 16, 75, 194, 74,
            168, 47, 25, 157, 109, 217, 74, 233, 64, 244, 22, 67, 151, 213, 30, 86, 255, 198, 241,
            122, 232, 157, 191, 45, 168, 147, 233, 250, 88, 123, 128, 118, 128, 199, 8, 192, 239,
            27, 81, 169, 18, 77, 37, 119, 222, 101, 75, 7, 237, 140, 247, 7, 162, 184, 93, 19, 109,
            56, 164, 143, 123, 231, 133, 178, 122, 206, 118, 227, 235, 53, 97, 153, 81, 142, 135,
            100, 247, 231, 47, 235, 201, 53, 145, 102, 247, 68, 74, 118, 3, 151, 111, 41, 85, 57,
            140, 109, 70, 140, 235, 9, 51, 181, 88, 205, 222, 171, 92, 214, 236, 112, 162, 52, 130,
            115, 131, 87, 9, 188, 11, 138, 111, 253, 148, 64, 255, 190, 170, 43, 116, 191, 46, 134,
            134, 245, 177, 150, 21, 119, 86, 212, 2, 77, 169, 90, 115, 250, 59, 177, 201, 46, 153,
            6, 78, 10, 152, 187, 215, 5, 82, 177, 168, 5, 37, 5, 228, 149, 125, 151, 190, 203, 75,
            108, 230, 194, 218, 152, 133, 11, 11, 73, 189, 133, 154, 177, 58, 147, 117, 25, 215, 5,
            85, 31, 120, 176, 207, 234, 13, 70, 197, 157, 176, 252, 221, 93, 78, 33, 112, 135, 37,
            28, 169, 166, 1, 214, 143, 157, 30, 206, 154, 35, 93, 178, 98, 83, 25, 212, 143, 64,
            64, 174, 207, 160, 29, 112, 229, 166, 11, 74, 128, 250, 109, 26, 127, 182, 34, 10, 163,
            239, 220, 246, 72, 45, 106, 43, 34, 122, 191, 190, 41, 227, 98, 167, 85, 48, 220, 14,
            30, 26, 211, 56, 135, 94, 11, 153, 172, 30, 196, 136, 83, 172, 122, 244, 4, 210, 236,
            69, 248, 147, 3, 153, 81, 29, 17, 52, 240, 121, 161, 229, 226, 167, 114, 112, 255, 136,
            219, 129, 163, 184, 209, 180, 117, 3, 7, 153, 225, 4, 62, 12, 202, 79, 244, 218, 206,
            58, 196, 171, 33, 128, 46, 32, 235, 86, 218, 121, 121, 116, 32, 67, 222, 170, 190, 49,
            22, 12, 199, 27, 242, 103, 17, 241, 143, 45, 175, 156, 120, 180, 93, 196, 94, 21, 173,
            222, 5, 24, 66, 180, 186, 233, 52, 16, 163, 60, 115, 70, 128, 50, 125, 206, 179, 157,
            255, 36, 174, 108, 10, 30, 248, 18, 72, 218, 151, 20, 42, 73, 194, 74, 102, 101, 30, 5,
            61, 157, 140, 154, 101, 141, 108, 219, 193, 25, 128, 240, 231, 12, 40, 9, 107, 160, 48,
            28, 42, 1, 13, 90, 140, 144, 227, 239, 217, 1, 87, 148, 181, 131, 15, 168, 109, 148,
            249, 93, 93, 69, 204, 190, 124, 13, 0, 88, 219, 32, 187, 50, 84, 224, 162, 80, 25, 43,
            66, 76, 128, 79, 154, 187, 89, 164, 72, 102, 131, 34, 160, 225, 243, 241, 184, 243,
            155, 36, 192, 121, 203, 164, 91, 210, 34, 178, 35, 204, 72, 52, 158, 1, 242, 128, 165,
            97, 191, 84, 66, 116, 42, 95, 15, 76, 193, 44, 113, 198, 164, 215, 17, 33, 101, 118,
            190, 72, 101, 137, 252, 138, 246, 86, 115, 192, 177, 71, 48, 203, 212, 83, 80, 10, 254,
            115, 94, 28, 151, 102, 116, 119, 207, 206, 208, 33, 110, 218, 122, 83, 172, 158, 103,
            122, 8, 148, 234, 198, 85, 83, 156, 139, 59, 42, 88, 242, 40, 54, 253, 71, 166, 10,
            239, 221, 231, 4, 176, 201, 161, 101, 204, 225, 226, 169, 196, 239, 228, 48, 135, 155,
            181, 231, 216, 126, 116, 42, 13, 21, 66, 251, 34, 132, 249, 21, 152, 109, 17, 62, 228,
            168, 155, 29, 213, 110, 220, 50, 169, 11, 40, 53, 114, 45, 27, 143, 159, 218, 86, 195,
            163, 207, 186, 53, 163, 149, 3, 96, 10, 73, 206, 222, 238, 76, 222, 107, 195, 95, 123,
            229, 199, 60, 134, 192, 65, 14, 113, 74, 161, 156, 173, 64, 70, 237, 97, 101, 220, 40,
            137, 145, 114, 252, 166, 142, 6, 112, 91, 8, 6, 73, 119, 128, 70, 187, 51, 139, 16, 35,
            12, 210, 177, 157, 250, 176, 88, 189, 34, 20, 90, 225, 62, 137, 64, 200, 97, 38, 239,
            177, 94, 41, 246, 102, 65, 39, 231, 200, 17, 42, 148, 61, 34, 114, 249, 125, 109, 195,
            29, 141, 71, 192, 61, 174, 130, 71, 59, 155, 111, 163, 222, 32, 198, 116, 178, 187,
            139, 103, 146, 198, 212, 148, 13, 174, 95, 33, 38, 165, 93, 198, 238, 60, 221, 203,
            242, 252, 126, 22, 141, 187, 211, 236, 58, 54, 82, 125, 228, 68, 175, 178, 38, 74, 231,
            70, 3, 104, 123, 167, 213, 2, 168, 4, 93, 66, 223, 185, 34, 74, 37, 191, 37, 182, 138,
            123, 51, 191, 51, 179, 75, 218, 201, 246, 170, 22, 57, 128, 122, 185, 43, 74, 74, 75,
            186, 88, 223, 141, 159, 109, 103, 41, 38, 139, 76, 141, 128, 118, 115, 46, 54, 176, 52,
            68, 59, 101, 161, 17, 137, 51, 112, 17, 37, 73, 8, 164, 138, 240, 54, 32, 2, 168, 47,
            48, 71, 236, 66, 246, 119, 130, 138, 34, 180, 222, 54, 3, 79, 160, 230, 180, 248, 177,
            175, 36, 167, 200, 52, 189, 81, 207, 158, 36, 131, 198, 105, 65, 180, 177, 123, 202,
            68, 211, 88, 79, 71, 97, 105, 246, 14, 41, 201, 74, 220, 128, 163, 232, 7, 177, 39,
            147, 55, 239, 32, 219, 52, 68, 133, 58, 34, 201, 180, 73, 74, 67, 218, 96, 198, 172,
            124, 171, 196, 6, 226, 51, 210, 100, 156, 190, 89, 205, 11, 34, 126, 16, 15, 78, 53, 0,
            166, 128, 43, 104, 40, 156, 179, 30, 150, 57, 106, 187, 144, 70, 190, 184, 202, 197,
            149, 235, 213, 237, 208, 240, 195, 164, 246, 171, 32, 142, 233, 116, 195, 122, 24, 101,
            119, 160, 241, 209, 104, 20, 254, 155, 27, 73, 117, 136, 201, 9, 207, 43, 43, 40, 118,
            159, 162, 2, 11, 165, 182, 20, 123, 237, 121, 57, 19, 179, 113, 162, 63, 223, 70, 230,
            200, 81, 191, 81, 153, 247, 206, 87, 116, 224, 206, 151, 118, 65, 21, 28, 205, 9, 59,
            125, 190, 130, 29, 95, 233, 184, 210, 147, 60, 60, 163, 154, 75, 146, 146, 172, 77,
            196, 76, 0, 98, 12, 124, 136, 209, 1, 155, 109, 53, 242, 230, 217, 22, 149, 12, 198,
            35, 61, 69, 48, 158, 68, 128, 142, 142, 69, 148, 211, 212, 174, 101, 30, 144, 25, 205,
            231, 181, 190, 70, 2, 152, 54, 137, 136, 196, 190, 173, 243, 254, 102, 173, 101, 163,
            105, 163, 0, 122, 116, 20, 7, 100, 90, 23, 170, 181, 210, 200, 80, 185, 241, 58, 245,
            24, 42, 36, 143, 161, 8, 2, 243, 146, 34, 238, 47, 109, 139, 196, 97, 92, 233, 187, 61,
            1, 6, 22, 58, 7, 38, 155, 254, 1, 152, 11, 170, 162, 237, 168, 211, 218, 92, 252, 163,
            176, 69, 160, 28, 106, 252, 212, 80, 101, 37, 5, 174, 45, 3, 210, 57, 14, 82, 177, 66,
            138, 59, 105, 231, 132, 118, 125, 79, 112, 205, 60, 172, 150, 202, 244, 201, 64, 23,
            12, 248, 126, 163, 210, 62, 117, 111, 90, 48, 56, 227, 236, 157, 86, 69, 94, 214, 35,
            252, 34, 153, 125, 47, 188, 98, 80, 5, 166, 30, 215, 21, 15, 60, 198, 208, 35, 15, 182,
            134, 132, 237, 193, 29, 36, 232, 106, 38, 4, 108, 126, 76, 218, 133, 169, 10, 198, 177,
            225, 216, 56, 61, 183, 176, 20, 122, 249, 140, 113, 39, 158, 119, 37, 194, 147, 254, 2,
            7, 240, 157, 125, 253, 89, 231, 124, 211, 181, 158, 251, 240, 5, 249, 141, 249, 188,
            51, 205, 150, 58, 184, 219, 180, 83, 97, 53, 77, 114, 211, 45, 130, 51, 233, 229, 31,
            117, 45, 153, 111, 246, 141, 148, 164, 47, 98, 222, 251, 67, 87, 18, 53, 37, 163, 240,
            32, 85, 116, 245, 2, 103, 24, 227, 113, 9, 35, 33, 100, 34, 72, 53, 219, 204, 132, 234,
            102, 133, 134, 44, 129, 247, 125, 36, 91, 32, 38, 72, 141, 112, 226, 172, 97, 173, 180,
            98, 200, 160, 84, 200, 242, 208, 75, 193, 218, 86, 30, 12, 167, 220, 122, 143, 85, 12,
            214, 224, 115, 185, 176, 141, 133, 111, 98, 89, 205, 138, 220, 1, 190, 25, 147, 30,
            190, 85, 200, 13, 108, 85, 184, 176, 131, 173, 169, 69, 81, 233, 197, 114, 199, 24,
            133, 49, 113, 71, 55, 238, 45, 65, 49, 172, 53, 118, 72, 144, 7, 55, 210, 212, 210, 3,
            113, 252, 253, 237, 96, 155, 6, 216, 207, 202, 20, 101, 126, 30, 255, 104, 137, 139,
            228, 6, 12, 20, 167, 129, 104, 39, 19, 233, 164, 98, 112, 66, 95, 245, 237, 194, 32,
            187, 221, 90, 207, 200, 47, 90, 226, 41, 91, 206, 143, 110, 203, 200, 179, 85, 6, 202,
            190, 93, 165, 77, 234, 206, 191, 119, 1, 64, 234, 233, 30, 25, 240, 67, 167, 171, 89,
            61, 109, 134, 63, 171, 49, 200, 70, 32, 146, 66, 180, 203, 6, 231, 235, 100, 200, 124,
            60, 40, 248, 127, 109, 20, 147, 177, 120, 162, 189, 202, 221, 133, 76, 181, 40, 223,
            218, 201, 144, 234, 163, 190, 73, 222, 9, 254, 168, 137, 165, 246, 176, 110, 105, 80,
            197, 14, 119, 117, 250, 171, 82, 249, 37, 206, 201, 37, 176, 54, 225, 161, 74, 72, 6,
            100, 107, 143, 18, 105, 218, 205, 129, 131, 131, 237, 105, 142, 173, 139, 171, 87, 165,
            28, 40, 158, 114, 108, 220, 91, 218,
        ];

        let public_input = vec![
            0, 149, 221, 100, 181, 187, 205, 218, 150, 243, 174, 150, 1, 108, 103, 27, 41, 133, 46,
            218, 100, 234, 137, 14, 162, 155, 188, 35, 85, 34, 44, 207, 35, 244, 57, 42, 217, 183,
            245, 231, 78, 211, 88, 15, 19, 65, 228, 15, 192, 160, 60, 228, 196, 202, 155, 206, 98,
            138, 206, 118, 159, 69, 119, 59, 46, 63, 29, 216, 163, 249, 221, 229, 154, 211, 90,
            167, 5, 53, 100, 221, 99, 221, 10, 121, 23, 85, 42, 101, 184, 34, 64, 134, 37, 123,
            113, 202, 0, 0, 0, 0, 0, 0, 0, 0, 7, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 4, 170, 17, 1, 23, 1, 29, 109, 250, 163, 73, 169, 2, 65, 141, 14,
            248, 141, 70, 150, 93, 176, 39, 115, 131, 81, 155, 181, 186, 135, 68, 212,
        ];
        let payload: EncryptedInputPayload = EncryptedInputPayload {
            acl: acl_data,
            encrypted_secrets: encrypted_data,
            me_decryption_url: "http://13.201.131.193:3000/decryptRequest".into(),
            market_id: "1".into(),
            public_inputs: Some(public_input),
        };

        fs::write(
            "5_check_encrypted_input_payload_compressed.json",
            serde_json::to_string(&payload).unwrap(),
        )
        .await
        .unwrap();

        let req = test::TestRequest::post()
            .uri("/checkEncryptedInputs")
            .set_json(&payload)
            .to_request();

        let resp = test::call_service(&app, req).await;
        dbg!(resp.status());
        assert!(resp.status().is_success());

        let result = test::read_body(resp).await;
        let result_json: serde_json::Value = serde_json::from_slice(&result).unwrap();
        // when payload is valid, signature is not required to be sent
        let expected_json = json!({
            "valid": true
        });
        assert_eq!(result_json, expected_json);
    }

    #[actix_rt::test]
    async fn test_check_encrypted_invalid_input() {
        let enclave_key = fs::read("./app/secp.sec").await.unwrap();
        let enclave_key = Arc::new(Mutex::new(enclave_key));

        let app = test::init_service(
            App::new()
                .service(handler::check_encrypted_input)
                .app_data(Data::new(enclave_key)),
        )
        .await;
        let data_to_encrypt = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 0];

        warn!("Matching Engine IP hardcoded, it should be fetched from somewhere else");

        let matching_engine_pubkey =
            hex::decode(fetch_me_pub_key().await.expect("Failed fetching me pubkey"))
                .expect("is valid ecies pubkey");
        let encrypted_data =
            kalypso_helper::secret_inputs_helpers::encrypt_data_with_ecies_and_aes(
                &matching_engine_pubkey,
                &data_to_encrypt,
            )
            .unwrap();

        let payload: EncryptedInputPayload = EncryptedInputPayload {
            acl: encrypted_data.acl_data,
            encrypted_secrets: encrypted_data.encrypted_data,
            me_decryption_url: "http://13.201.131.193:3000/decryptRequest".into(),
            market_id: "19".into(),
            public_inputs: None,
        };

        fs::write(
            "6_check_encrypted_invalid_input_payload.json",
            serde_json::to_string(&payload).unwrap(),
        )
        .await
        .unwrap();

        let req = test::TestRequest::post()
            .uri("/checkEncryptedInputs")
            .set_json(&payload)
            .to_request();

        let resp = test::call_service(&app, req).await;
        assert!(resp.status().is_success());

        let result = test::read_body(resp).await;
        let result_json: serde_json::Value = serde_json::from_slice(&result).unwrap();
        // when payload is valid, signature is not required to be sent
        let expected_json = json!({"valid": false});
        assert_eq!(result_json, expected_json);
    }

    #[actix_rt::test]
    async fn test_verify_input_and_proof() {
        let app = test::init_service(App::new().service(handler::verify_inputs_and_proof)).await;

        let private_input = fs::read("./app/secret.json").await.unwrap();

        let input_payload = kalypso_generator_models::models::InputPayload::from_plain_secrets(
            [
                0, 149, 221, 100, 181, 187, 205, 218, 150, 243, 174, 150, 1, 108, 103, 27, 41, 133,
                46, 218, 100, 234, 137, 14, 162, 155, 188, 35, 85, 34, 44, 207, 35, 244, 57, 42,
                217, 183, 245, 231, 78, 211, 88, 15, 19, 65, 228, 15, 192, 160, 60, 228, 196, 202,
                155, 206, 98, 138, 206, 118, 159, 69, 119, 59, 46, 63, 29, 216, 163, 249, 221, 229,
                154, 211, 90, 167, 5, 53, 100, 221, 99, 221, 10, 121, 23, 85, 42, 101, 184, 34, 64,
                134, 37, 123, 113, 202, 0, 0, 0, 0, 0, 0, 0, 0, 7, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 170, 17, 1, 23, 1, 29, 109, 250, 163, 73,
                169, 2, 65, 141, 14, 248, 141, 70, 150, 93, 176, 39, 115, 131, 81, 155, 181, 186,
                135, 68, 212,
            ]
            .into(),
            private_input,
        );

        let encoded_proof = [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 1, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 2, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 149, 221, 100, 181, 187, 205, 218, 150, 243,
            174, 150, 1, 108, 103, 27, 41, 133, 46, 218, 100, 234, 137, 14, 162, 155, 188, 35, 85,
            34, 44, 207, 35, 244, 57, 42, 217, 183, 245, 231, 78, 211, 88, 15, 19, 65, 228, 15,
            192, 160, 60, 228, 196, 202, 155, 206, 98, 138, 206, 118, 159, 69, 119, 59, 46, 63, 29,
            216, 163, 249, 221, 229, 154, 211, 90, 167, 5, 53, 100, 221, 99, 221, 10, 121, 23, 85,
            42, 101, 184, 34, 64, 134, 37, 123, 113, 202, 0, 0, 0, 0, 0, 0, 0, 0, 7, 208, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 170, 17, 1, 23, 1, 29, 109,
            250, 163, 73, 169, 2, 65, 141, 14, 248, 141, 70, 150, 93, 176, 39, 115, 131, 81, 155,
            181, 186, 135, 68, 212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 26, 65, 225, 157, 73, 228, 73, 12, 73, 29, 10, 19, 79,
            25, 221, 105, 108, 70, 122, 54, 80, 53, 253, 52, 200, 10, 89, 118, 210, 186, 122, 159,
            21, 133, 225, 6, 191, 133, 87, 183, 88, 153, 32, 4, 180, 42, 90, 189, 112, 51, 189,
            244, 102, 207, 29, 127, 55, 5, 249, 77, 236, 141, 72, 145, 25, 87, 205, 23, 102, 147,
            238, 32, 241, 72, 87, 60, 113, 10, 124, 107, 199, 33, 64, 127, 43, 45, 88, 196, 56,
            163, 160, 62, 123, 243, 171, 188, 36, 200, 153, 33, 208, 162, 100, 111, 242, 117, 21,
            250, 100, 175, 210, 203, 138, 253, 30, 251, 110, 94, 180, 19, 147, 176, 119, 104, 235,
            81, 98, 208, 39, 156, 90, 84, 47, 68, 47, 174, 246, 36, 238, 252, 179, 73, 93, 14, 41,
            240, 178, 139, 176, 130, 224, 134, 10, 67, 46, 97, 232, 198, 239, 148, 30, 115, 19, 94,
            141, 47, 42, 216, 247, 229, 192, 254, 217, 83, 177, 169, 112, 47, 11, 238, 141, 37, 95,
            185, 27, 181, 22, 212, 223, 189, 96, 5, 6, 55, 118, 97, 211, 25, 190, 198, 99, 154,
            222, 172, 115, 231, 200, 52, 138, 177, 216, 246, 117, 235, 253, 15, 227, 65, 227, 125,
            36, 18, 102, 254, 35, 10, 100, 152, 184, 236, 200, 165, 1, 154, 159, 251, 201, 248, 39,
            59, 117, 23, 237, 136, 159, 194, 146, 217, 119, 168, 81, 122, 128, 109, 54, 243, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            65, 26, 120, 240, 198, 189, 0, 200, 156, 90, 42, 50, 49, 108, 192, 2, 72, 117, 49, 156,
            198, 30, 162, 54, 44, 127, 185, 218, 98, 50, 45, 21, 43, 109, 131, 102, 190, 238, 22,
            18, 143, 201, 122, 29, 41, 189, 5, 44, 102, 255, 217, 158, 45, 95, 170, 46, 210, 21,
            250, 38, 65, 221, 53, 136, 50, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        let payload: kalypso_ivs_models::models::VerifyInputsAndProof =
            kalypso_ivs_models::models::VerifyInputsAndProof {
                public_input: Some(input_payload.get_public()),
                private_input: Some(input_payload.get_plain_secrets().unwrap()),
                proof: encoded_proof.to_vec(),
            };

        fs::write(
            "7_verify_inputs_and_proof_payload.json",
            serde_json::to_string(&payload).unwrap(),
        )
        .await
        .unwrap();

        let req = test::TestRequest::post()
            .uri("/verifyInputsAndProof")
            .set_json(&payload)
            .to_request();

        let resp = test::call_service(&app, req).await;

        assert!(resp.status().is_success());
        let result = test::read_body(resp).await;
        let result_json: serde_json::Value = serde_json::from_slice(&result).unwrap();
        let expected_json = json!({
            "valid": true
        });

        assert_eq!(result_json, expected_json);
    }

    async fn fetch_me_pub_key() -> Result<String, Box<dyn std::error::Error>> {
        warn!("Fetching ME publickey dynamically using matching engine client");

        let url = "http://13.201.131.193:5000/api/getMatchingEnginePublicKeys";

        let response = reqwest::get(url).await?;

        #[derive(Serialize, Debug, Deserialize)]
        pub struct MatchingEnginePublicKeys {
            pub matching_engine_public_key: String,
            pub matching_engine_ecies_public_key: String,
        }

        #[derive(Serialize, Deserialize, Debug)]
        struct JsonResponse {
            // status: String,
            message: String,
            data: Option<MatchingEnginePublicKeys>,
        }

        if response.status().is_success() {
            let json_response: JsonResponse = response.json().await?;

            if let Some(data) = json_response.data {
                let pub_key_stripped = data
                    .matching_engine_ecies_public_key
                    .strip_prefix("0x")
                    .unwrap_or(&data.matching_engine_ecies_public_key);
                Ok(pub_key_stripped.to_string())
            } else {
                Err("Missing data in response".into())
            }
        } else {
            Err("Failed fetching ME keys".into())
        }
    }
}
